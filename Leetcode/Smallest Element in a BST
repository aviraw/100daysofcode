METHOD 1 - Using Inorder O(n)

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> out= inorderTrav(root);
        int r=out.get(k-1);
        return r;
    }
    public List<Integer> inorderTrav(TreeNode root)
    {
        if(root==null) return null;
        Stack<TreeNode> st = new Stack<>();
        List<Integer> out=new ArrayList<>();
        TreeNode curr=root;
        while(!st.isEmpty() || curr!=null )
        {
            if(curr!=null)
            {
                st.push(curr);
                curr=curr.left;
            }
            else
            {
                TreeNode n=st.pop();
                out.add(n.val);
                curr=n.right;
            }
        }
        return out;
    }
}

Method 2 - Without List using recursion - cuts on space complexity

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        int nums[]=new int[2];
        inorderTrav(root, nums, k);
        
        return nums[1];
    }
    public void inorderTrav(TreeNode root, int[] nums, int k)
    {
        if(root==null) return;  //go all the way to left
        
        inorderTrav(root.left,nums,k);
        if(++nums[0]==k){          // did we reach k?
            nums[1]=root.val;        //perfect we got it!
            return;
        }
        //else we do it again for right child
        inorderTrav(root.right, nums, k);
             
    }
}
